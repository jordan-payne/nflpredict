NFL Win/Loss predictors
---------------------------
A collection of predictors based on approach by Leung and Joseph in
"Sports data mining: predicting results for the college football games"

This README should be read in conjunction with our paper.

Written by Ivy Truong and Jordan Payne

This project includes the following files:
  - nfl_generate_data.py
  - predict.py
  - accuracy.py
  - data.json
  - nfl_predict_playoffs.py
  - nfl_predict_season.py
  - Makefile
  - Readme

BEFORE RUNNING INSTRUCTIONS:
There are several components you must install prior to running any of the scripts.
For Nitish: If this is too much, we'd be happy to demo on one of our machines.

1. You must install PostgreSQL and an instance of nfldb
  - instructions for installation in a linux environment can be found here: https://github.com/BurntSushi/nfldb/wiki/Installation
  - if you already have PostgreSQL installed and running you can create a new DB and import an instance
    of nfldb. A full instance of the DB is found here: http://burntsushi.net/stuff/nfldb/nfldb.sql.zip

2. Once the DB is running and an instance of nfldb imported you must configure nfldb to connect to
    the DB. See the "Configuring nfldb" section here: https://github.com/BurntSushi/nfldb/wiki/Installation

3. Install nfldb python lib, we've include a make file that installs the python library using
    pip. If you do not have pip you must install it first: https://pip.pypa.io/en/stable/installing/
    You can run $make to install the library and $make clean to uninstall once done.

4. Once the above steps you should be able run each of the scripts which we'll describe below.

nfl_generate_data.py
--------------------
Generates data.json (already included) which is used by predict.py (our System 1 implementation)
to make predictions. There isn't a requirement to run this file again as we included data.json. If you do run
it it will re-generate data.json. Can be run by:

  $./nfl_generate_data.py

The output will be the file data.json. As it is running it will output the teams it is generating.

nfl_predict_playoffs.py
-------------------------
Our System 2 implementation (described in our report). This script can be run by:

  $./nfl_predict_playoffs.py

It predicts the 11 games in a postseason of your choice, outputting the prediction
for each game and a final accuracy measure at the end.

Sample output:
  Enter a year to predict (2009-2014) or hit "enter" to predict all available years: 2012
  ---------------
  NE: 151.948374417
  HOU: 150.599462353
  CORRECT
  ---------------
  ---------------
  NE: 176.83822486
  BAL: 169.8947314
  INCORRECT
  ---------------
  ---------------
  HOU: 200.473121934
  CIN: 186.245174374
  CORRECT
  ---------------
  ---------------
  GB: 182.218046031
  MIN: 176.372170414
  CORRECT
  ---------------
  ---------------
  BAL: 217.941573002
  IND: 208.861839139
  CORRECT
  ---------------
  ---------------
  WAS: 162.881561277
  SEA: 170.361345886
  CORRECT
  ---------------
  ---------------
  DEN: 192.290421364
  BAL: 184.589610839
  INCORRECT
  ---------------
  ---------------
  SF: 162.732912635
  GB: 160.012162705
  CORRECT
  ---------------
  ---------------
  ATL: 162.190202374
  SEA: 165.291003614
  INCORRECT
  ---------------
  ---------------
  ATL: 163.645909071
  SF: 167.515158183
  CORRECT
  ---------------
  ---------------
  SF: 188.2529102
  BAL: 178.998918096
  INCORRECT
  ---------------
  Accuracy: 0.636363636364



nfl_predict_season.py
---------------------
Our System 3 implementation (described in our report). This script can be run by:

  $./nfl_predict_playoffs.py

It predicts all 256 games of a given regular season using a training season of your
choice. Not that it takes a few minutes to run. It provides you the prediction of each game
and an accuracy measure at the end.

Sample output:
  Enter a year to predict (2009-2015): 2010
  Enter a year for training, cannot be the same as prediction year (2009-2015): 2012

  ---------------
  NO: 87.3234044227
  MIN: 87.3234044227
  CORRECT
  ---------------
  ---------------
  TB: 85.9516293201
  CLE: 85.9516293201
  INCORRECT
  ---------------
  ---------------
  NE: 85.4017091131
  CIN: 85.4017091131
  CORRECT
  ---------------
  ---------------
  .
  .
  .
  ---------------
  DEN: 124.189371041
  SD: 126.021538667
  CORRECT
  ---------------
  ---------------
  SF: 127.840645392
  ARI: 127.485257833
  CORRECT
  ---------------
  ---------------
  SEA: 149.098807978
  STL: 149.492295702
  INCORRECT
  ---------------
  0.516806722689
